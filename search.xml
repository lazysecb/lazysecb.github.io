<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F01%2F%E7%AC%A8%E5%8A%9E%E6%B3%95%E5%AD%A6Python%20-%20%E4%B9%A0%E9%A2%985%20More%20Variables%20and%20Printing%2F</url>
    <content type="text"><![CDATA[笨办法学Python - 习题5 More Variables and Printing1、习题 4: 更多的变量和打印学习目标：了解用户输入方法，明白pthon2和Python3之间的用户输入的区别。了解格式化字符串(format string)的概念，学会如何创建包含变量内容的字符串。使用专门的格式和语法把变量的内容放到字符串里，然后进行格式化的打印输出。 1.1、用户输入在Python3中通常使用的input() 函数直接和用户进行交互，用于等待用户的输入。 在Python2中通常使用raw_input() 函数来和用户进行交互，基本上raw_input() = input() (python3中),python2中的input() 函数基本上不用，因为在Python2中input() 函数会检查用户输入的是字符还是变量，举个栗子：如果之前定义了name的值，那么name为变量，则当我们输入name的时候，会返回变量name的值，如果之前没有定义name的值则会直接报错。 所以：对于用户输入，在Python2 中使用raw_input() ，在Python3中使用 input() 即可。 1.2、格式化输出python格式化输出有两种方式：百分号和formatformat的功能要比百分号方式强大，其中format独有的可以自定义字符填充空白、字符串居中显示、转换二进制、整数自动分割、百分比显示 等功能是百分号方式不能相比的 习题五中的练习代码是： 123456789101112131415161718192021222324#! -*-coding=utf-8 -*-my_name = "Zed A. shaw"my_age = 35my_height = 74my_weight = 180my_eyes = "Blue"my_teeth = "White"my_hair = "Brown"print "Let,s talk about %s." % my_nameprint "He's %d inches tall." % my_heightprint "He's %d pounds heavy." % my_weightprint "Actually that's not too heavy."print "He's got %s eyes and %s hair." % (my_eyes,my_hair)print "His teech are usually %s depending on the coffee." % my_teeth#this line is tricky ,try to get it exactly rightprint "If I add %d, %d, and %d I get %d." % (my_age,my_height,my_weight,my_age + my_height + my_weight) 上述代码的运行结果为： 12345678910C:\Python27\python.exe D:/pythoncode/stupid_way_study/demo5/Exer5-1.pyLet,s talk about Zed A. shaw.He's 74 inches tall.He's 180 pounds heavy.Actually that's not too heavy.He's got Blue eyes and Brown hair.His teech are usually White depending on the coffee.If I add 35, 74, and 180 I get 289.Process finished with exit code 0 从上面的代码可以了解到，%d 和 %s 都是占位符，顾名思义，就是提前占个位置，后面在用%后面的值来替换该占位符，将值放到正确的位置上。 注意： %d: 将整数、浮点数转换成 十 进制表示，并将其格式化到指定位置 %s: 获取传入对象的 str 方法的返回值，并将其格式化到指定位置 同理还有%f, %o %g 等占位符。这里就不一一赘述了。 2、加分习题： 修改所有的变量名字，把它们前面的my_去掉。确认将每一个地方的都改掉，不只是你使用=赋值过的地方。 试着使用更多的格式化字符。例如 %r 就是是非常有用的一个，它的含义是“不管什么都打印出来”。 在网上搜索所有的 Python 格式化字符。 试着使用变量将英寸和磅转换成厘米和千克。不要直接键入答案。使用 Python 的计算功能来完成。 3、我的答案3.1、修改所有的变量名字，把它们前面的my_去掉 123456789101112131415161718192021222324#! -*-coding=utf-8 -*-name = "Zed A. shaw"age = 35height = 74weight = 180eyes = "Blue"teeth = "White"hair = "Brown"print "Let,s talk about %s." % nameprint "He's %d inches tall." % heightprint "He's %d pounds heavy." % weightprint "Actually that's not too heavy."print "He's got %s eyes and %s hair." % (eyes,hair)print "His teech are usually %s depending on the coffee." % teeth#this line is tricky ,try to get it exactly rightprint "If I add %d, %d, and %d I get %d." % (age,height,weight,age + height + weight) 12345678910C:\Python27\python.exe D:/pythoncode/stupid_way_study/demo5/Exer5-2.pyLet,s talk about Zed A. shaw.He's 74 inches tall.He's 180 pounds heavy.Actually that's not too heavy.He's got Blue eyes and Brown hair.His teech are usually White depending on the coffee.If I add 35, 74, and 180 I get 289.Process finished with exit code 0 上述代码去掉前面的“my_”, 并未发现问题。 3.2、使用%r 格式化字符 举个栗子： %s 和 %r 的用法区别： 其主要区别在于 %r 把原始的信息显示了出来，如字符串保留了引号，%r 用来做 debug处理，因为因为它会显示变量的原始数据（raw data），而其它的符号则是用来向用户显示输出的。%s 只是显示其值。 3.3、Python格式化字符 字符串格式代码如下： 3.4、试着使用变量将英寸和磅转换成厘米和千克，然后使用Python计算** 4、课后扩展4.1、字符串拼接实现格式化输出字符换一般用“+”加号进行字符串的拼接，一般情况下，字符串拼接情况下的格式化输出不常用 123456789101112131415#! -*-coding=utf-8 -*-name = raw_input("name:")age = raw_input("age:")job = raw_input("job:")salary = raw_input("slary:")person_infomation = '''----------------'''+ name + '''的个人信息----------------name:'''+ name +'''age :'''+ age + '''job :'''+ job + '''salary:'''+ salary +''''''print person_infomation 上述代码的运行结果为： 12345678910111213C:\Python27\python.exe D:/pythoncode/stupid_way_study/demo5/Exer5-4.pyname:kang #手工输入的信息age:24job:doctorslary:3000# 打印输出的信息----------------kang的个人信息----------------name:kangage :24job :doctorsalary:3000Process finished with exit code 0 上述代码就是一个字符串拼接格式化输出的实例，使用加号进行字符串的拼接，但是一般不建议这么写，因为在因为拼接的字符串写法比较差，执行速度慢一般不建议使用，同时需要开辟好几块内存，效率低下。 4.2、占位符%s实现格式化输出如上面习题5实例代码，但是还有几个点需要注意一下： 12345678910111213141516#! -*-coding=utf-8 -*-name = raw_input("name:")age = raw_input("age:")job = raw_input("job:")salary = raw_input("slary:")person_infomation = '''---------------- %s 的个人信息----------------name:%sage :%sjob :%ssalary:%s''' % (name,name,age,job,salary)print person_infomation 上述代码的运行结果为： 12345678910111213C:\Python27\python.exe D:/pythoncode/stupid_way_study/demo5/Exer5-5.pyname:kangage:34job:doctorslary:30000---------------- kang 的个人信息----------------name:kangage :34job :doctorsalary:30000Process finished with exit code 0 注意： 上面有几个占位符那么下面就需要引用几个变量，数量上要一一对应，不然程序会直接报错 %s %d %f帮助检测用户输入的数据类型是否是要求的，不是就直接报错。比如说，我们需要输入的age为整数，那么如果我们使用%s进行占位，那么我们输入的值就会自动被认为是字符型，如果我们需要输入的值为整数型那么需要用%d进行占位。 4.3、用.format实现格式化输出相对于占位符%s实现格式化输出这中方式，format功能更强大，该函数把字符串当成一个模板，通过传入的参数进行格式化，并且使用大括号‘{}’作为特殊字符代替‘%’。 .format的位置匹配规则： 不带编号，即“{}” 带数字编号，可调换顺序，即“{1}”、“{2}” 带关键字，即“{a}”、“{tom}” 4.3.1 、不带编号的情况首先看第一个，不带编号的情况，就是按照从前到后的顺序依次匹配 12345678910111213141516#! -*-coding=utf-8 -*-name = raw_input("name:")age = raw_input("age:")job = raw_input("job:")salary = raw_input("slary:")person_infomation = '''---------------- &#123;&#125; 的个人信息----------------name:&#123;&#125;age :&#123;&#125;job :&#123;&#125;salary:&#123;&#125;''' .format(name,name,age,job,salary)print person_infomation 12345678910111213C:\Python27\python.exe D:/pythoncode/stupid_way_study/demo5/Exer5-5.pyname:Jackage:43job:teacherslary:20000---------------- Jack 的个人信息----------------name:Jackage :43job :teachersalary:20000Process finished with exit code 0 上面这个代码就是运用了.format() 的不带编号匹配原则，从前到后依次填充format( ) 括号中的值。注意前后顺序很重要，不然就会乱序的。 4.3.2、带数字编号的情况带数字的情况是.format大括号{x}中是0-n，使用{0-n}来先进行占位，然后再在下面使用.format引用上面已定义的变量（一，一定义） 4.3.3、带关键字的情况这里的.format主要是使用多个变量进行占位{_name}然后下面再用.format将定义的变量名和上面已定义的变量进行连接（一，一对应） 12345678910111213141516171819#! -*-coding=utf-8 -*-name = raw_input("name:")age = raw_input("age:")job = raw_input("job:")salary = raw_input("slary:")person_infomation = '''---------------- &#123;_name&#125; 的个人信息----------------name:&#123;_name&#125;age :&#123;_age&#125;job :&#123;_job&#125;salary:&#123;_salary&#125;''' .format(_name = name, _age = age, _job = job, _salary = salary)print person_infomation 12345678910111213C:\Python27\python.exe D:/pythoncode/stupid_way_study/demo5/Exer5-6.pyname:kangage:34job:teacherslary:3000---------------- kang 的个人信息----------------name:kangage :34job :teachersalary:3000Process finished with exit code 0 5、习题总结习题5主要是学习了和用户交互输入需要注意的地方，还学习了格式化输出的各种形式。重点是.format() 函数的使用。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[categories]]></title>
    <url>%2Fcategories%2Findex.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[tages]]></title>
    <url>%2Ftages%2Findex.html</url>
    <content type="text"></content>
  </entry>
</search>
